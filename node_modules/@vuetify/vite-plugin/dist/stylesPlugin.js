"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stylesPlugin = void 0;
const promises_1 = require("fs/promises");
const path_1 = require("path");
const mkdirp_1 = __importDefault(require("mkdirp"));
function isSubdir(root, test) {
    const relative = path_1.posix.relative(root, test);
    return relative && !relative.startsWith('..') && !path_1.posix.isAbsolute(relative);
}
const styleImportRegexp = /@use ['"]vuetify(\/lib)?\/styles(\/main(\.sass)?)?['"]/;
const cachePath = path_1.posix.resolve(process.cwd(), 'node_modules/.cache/vuetify/styles.scss');
function stylesPlugin(options) {
    const vuetifyBase = path_1.posix.dirname(require.resolve('vuetify/package.json'));
    const files = new Set();
    let server;
    let resolve;
    let promise;
    let timeout;
    let needsTouch = false;
    async function awaitResolve() {
        clearTimeout(timeout);
        timeout = setTimeout(() => {
            resolve(true);
        }, 500);
        if (!promise) {
            promise = new Promise((_resolve) => resolve = _resolve);
            await promise;
            await (0, mkdirp_1.default)(path_1.posix.dirname(cachePath));
            await (0, promises_1.writeFile)(cachePath, ['vuetify/lib/styles/main.sass', ...files.values()].map(v => `@forward '${v}';`).join('\n'), 'utf8');
            if (needsTouch) {
                server.moduleGraph.getModulesByFile(cachePath)?.forEach(module => {
                    module.importers.forEach(module => {
                        module.file && (0, promises_1.utimes)(module.file, Date.now(), Date.now());
                    });
                });
                needsTouch = false;
            }
            promise = null;
        }
        return promise;
    }
    return {
        name: 'vuetify:styles',
        enforce: 'pre',
        configureServer(_server) {
            server = _server;
        },
        async resolveId(source, importer, custom) {
            if (importer &&
                source.endsWith('.css') &&
                isSubdir(vuetifyBase, importer)) {
                if (options.styles === 'none') {
                    return '__void__';
                }
                else if (options.styles === 'expose') {
                    awaitResolve();
                    const resolution = await this.resolve(source.replace(/\.css$/, '.sass'), importer, { skipSelf: true, custom });
                    if (resolution) {
                        if (!files.has(resolution.id)) {
                            needsTouch = true;
                            files.add(resolution.id);
                        }
                        return '__void__';
                    }
                }
            }
            return null;
        },
        async transform(code, id) {
            if (options.styles === 'expose' &&
                ['.scss', '.sass'].some(v => id.endsWith(v)) &&
                styleImportRegexp.test(code)) {
                await awaitResolve();
                return code.replace(styleImportRegexp, '@use ".cache/vuetify/styles.scss"');
            }
        },
        load(id) {
            if (id === '__void__') {
                return '';
            }
            return null;
        },
    };
}
exports.stylesPlugin = stylesPlugin;
//# sourceMappingURL=stylesPlugin.js.map