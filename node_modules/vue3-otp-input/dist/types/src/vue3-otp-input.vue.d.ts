import { PropType } from "vue";
declare const _default: import("vue").DefineComponent<{
    numInputs: {
        default: number;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    inputClasses: {
        type: PropType<string | string[]>;
    };
    conditionalClass: {
        type: PropType<string[]>;
        default: never[];
    };
    inputType: {
        type: PropType<"number" | "tel" | "letter-numeric" | "password">;
        validator: (value: string) => boolean;
    };
    inputmode: {
        type: StringConstructor;
        validator: (value: string) => boolean;
        default: string;
    };
    shouldAutoFocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: PropType<string[]>;
        default: never[];
    };
    isDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    activeInput: import("vue").Ref<number>;
    otp: import("vue").Ref<[]>;
    oldOtp: import("vue").Ref<[]>;
    clearInput: () => void;
    handleOnPaste: (event: any) => void | "Invalid pasted data" | "Wait until the user enters the required number of characters";
    handleOnKeyDown: (event: KeyboardEvent) => void;
    handleOnBlur: () => void;
    changeCodeAtFocus: (value: number | string) => void;
    focusInput: (input: number) => void;
    focusNextInput: () => void;
    focusPrevInput: () => void;
    handleOnFocus: (index: number) => void;
    checkFilledAllInputs: () => void | "Wait until the user enters the required number of characters";
    handleOnChange: (value: number) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    numInputs: {
        default: number;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    inputClasses: {
        type: PropType<string | string[]>;
    };
    conditionalClass: {
        type: PropType<string[]>;
        default: never[];
    };
    inputType: {
        type: PropType<"number" | "tel" | "letter-numeric" | "password">;
        validator: (value: string) => boolean;
    };
    inputmode: {
        type: StringConstructor;
        validator: (value: string) => boolean;
        default: string;
    };
    shouldAutoFocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: PropType<string[]>;
        default: never[];
    };
    isDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    numInputs: number;
    separator: string;
    conditionalClass: string[];
    inputmode: string;
    shouldAutoFocus: boolean;
    placeholder: string[];
    isDisabled: boolean;
}>;
export default _default;
